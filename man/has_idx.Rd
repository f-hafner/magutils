% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/db_checking.R
\name{has_idx}
\alias{has_idx}
\title{Check if a table has an index on some columns}
\usage{
has_idx(conn, on_tbl, on_cols, keep_unique = FALSE, temp = FALSE)
}
\arguments{
\item{conn}{An object of class \code{SQLiteConnection} to a sqlite database.}

\item{on_tbl}{A table in the database.}

\item{on_cols}{A character vector with the columns to check.}

\item{keep_unique}{A logical. Additionally check if the index has the
UNIQUE constraint. Default is FALSE.}

\item{temp}{Should \code{sqlite_temp_master} be queried, instead of
\code{sqlite_master}? Default is FALSE. This can be useful when looking for
temporary tables and indexes on them.}
}
\value{
A logical.
}
\description{
Check if a table has an index on some columns
}
\details{
The function only checks \emph{exact} matching of \code{on_cols}, that is, the
order of columns in \code{on_cols} needs to correspond to the order of columns in
the CREATE INDEX statement: If \code{on_cols = c("col1", "col2")}, but the
database has \code{"CREATE UNIQUE INDEX idx1 ON mytable(col2, col1)"},
the function will return FALSE.
}
\examples{
conn <- connect_to_db(db_example("AcademicGraph.sqlite"))
has_idx(conn, "author_output", "AuthorId", keep_unique = TRUE)
}
